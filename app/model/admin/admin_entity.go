// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package admin

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table admin.
type Entity struct {
    Id            uint   `orm:"id,primary"      json:"id"`              // 用户id            
    Username      string `orm:"username"        json:"username"`        // 用户名            
    Password      string `orm:"password"        json:"password"`        // 密码              
    Mobile        string `orm:"mobile"          json:"mobile"`          // 手机号            
    Salt          string `orm:"salt"            json:"salt"`            // 盐                
    Status        int    `orm:"status"          json:"status"`          // 状态:0正常 1禁用  
    LastLoginIp   string `orm:"last_login_ip"   json:"last_login_ip"`   // 最后登录ip        
    LastLoginTime uint   `orm:"last_login_time" json:"last_login_time"` // 最后登录时间      
    CreateTime    uint   `orm:"create_time"     json:"create_time"`     // 添加时间          
    UpdateTime    uint   `orm:"update_time"     json:"update_time"`     // 修改时间          
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}