// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package articles

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table articles.
type Entity struct {
    Id           int    `orm:"id,primary"    json:"id"`            // 主键id         
    UserId       int    `orm:"user_id"       json:"user_id"`       // 用户ID         
    Title        string `orm:"title"         json:"title"`         // 文章标题       
    CategoryId   int    `orm:"category_id"   json:"category_id"`   // 分类id         
    Content      string `orm:"content"       json:"content"`       // 博文内容       
    Views        int64  `orm:"views"         json:"views"`         // 浏览量         
    LikeCount    int64  `orm:"like_count"    json:"like_count"`    // 喜欢数         
    CommentCount int64  `orm:"comment_count" json:"comment_count"` // 评论总数       
    Status       int    `orm:"status"        json:"status"`        // 0 正常 1 删除  
    CreateTime   int    `orm:"create_time"   json:"create_time"`   // 创建时间       
    UpdateTime   int    `orm:"update_time"   json:"update_time"`   // 修改时间       
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}