// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package users

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table users.
type Entity struct {
    Id         uint   `orm:"id,primary"      json:"id"`          //                            
    Username   string `orm:"username,unique" json:"username"`    // 用户名                     
    Password   string `orm:"password"        json:"password"`    // 密码                       
    Phone      string `orm:"phone,unique"    json:"phone"`       // 手机号                     
    Email      string `orm:"email"           json:"email"`       // 邮箱                       
    Avatar     string `orm:"avatar"          json:"avatar"`      // 头像                       
    Status     uint   `orm:"status"          json:"status"`      // 状态 0:删除 1:正常 2:禁用  
    CreateTime uint   `orm:"create_time"     json:"create_time"` // 创建时间                   
    UpdateTime uint   `orm:"update_time"     json:"update_time"` // 更新时间                   
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}