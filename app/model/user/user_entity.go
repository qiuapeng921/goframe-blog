// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package user

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table user.
type Entity struct {
    Id         uint   `orm:"id,primary"     json:"id"`          //                                 
    Account    string `orm:"account,unique" json:"account"`     // 用户名                          
    NickName   string `orm:"nick_name"      json:"nick_name"`   // 昵称                            
    Sex        uint   `orm:"sex"            json:"sex"`         // 性别 0:保密 1:男 2:女           
    Age        uint   `orm:"age"            json:"age"`         // 年龄                            
    Phone      string `orm:"phone,unique"   json:"phone"`       // 手机号                          
    Password   string `orm:"password"       json:"password"`    // 密码                            
    Email      string `orm:"email"          json:"email"`       // 邮箱                            
    Grade      int    `orm:"grade"          json:"grade"`       // 用户等级                        
    Points     uint   `orm:"points"         json:"points"`      // 用户积分                        
    Amount     uint   `orm:"amount"         json:"amount"`      // 用户金额                        
    Openid     string `orm:"openid"         json:"openid"`      // openid                          
    ImageUrl   string `orm:"image_url"      json:"image_url"`   // 头像                            
    Initials   string `orm:"initials"       json:"initials"`    // 首字母                          
    Signature  string `orm:"signature"      json:"signature"`   // 个性签名                        
    Status     uint   `orm:"status"         json:"status"`      // 状态 0:删除 1:正常 2:禁用       
    UserType   uint   `orm:"user type"      json:"user_type"`   // 用户类型 0:普通用户 1:系统用户  
    CreateTime uint   `orm:"create_time"    json:"create_time"` // 创建时间                        
    UpdateTime uint   `orm:"update_time"    json:"update_time"` // 更新时间                        
    DeleteTime uint   `orm:"delete_time"    json:"delete_time"` // 删除时间                        
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}