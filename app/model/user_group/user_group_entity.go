// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package user_group

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table user_group.
type Entity struct {
    Id          uint   `orm:"id,primary"   json:"id"`           //                   
    UserId      uint   `orm:"user_id"      json:"user_id"`      // 创建人用户ID      
    GroupName   string `orm:"group_name"   json:"group_name"`   // 组名              
    GroupNotice string `orm:"group_notice" json:"group_notice"` // 群公告            
    AdminNum    int    `orm:"admin_num"    json:"admin_num"`    // 已添加管理员人数  
    OpenAdmin   uint   `orm:"open_admin"   json:"open_admin"`   // 是否开启群管理    
    Status      uint   `orm:"status"       json:"status"`       // 状态(1:正常)      
    CreateTime  uint   `orm:"create_time"  json:"create_time"`  // 创建时间          
    UpdateTime  uint   `orm:"update_time"  json:"update_time"`  // 更新时间          
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}